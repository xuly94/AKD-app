import streamlit as st
import lightgbm as lgb
import numpy as np

# Load the AKD and CKD models
akd_model = lgb.Booster(model_file='akd_model.txt')
ckd_model = lgb.Booster(model_file='ckd_model.txt')

# Mapping for Urine_protein and AKIGrade values
Urine_protein_mapping = {"-": 0, "1+": 1, "2+": 2, "3+": 3}
AKIGrade_mapping = {"Stage 0": 0, "Stage 1": 1, "Stage 2": 2, "Stage 3": 3}
Pathology_mapping = {"Benign": 0, "Malignant (Non-Clear)": 1, "Clear Cell": 2}
AKI_and_AKD_mapping = {"NKD": 0, "subacute AKD": 1, "AKI recover": 2,"AKD with AKI": 3}




def predict_akd_probability(features):
    akd_prob = akd_model.predict(features)
    return akd_prob[0]

def predict_ckd_probability(features):
    ckd_prob = ckd_model.predict(features)
    return ckd_prob[0]


def main():
    st.title('AKD and CKD Probability Prediction after Nephrectomy')

# User selects which content to display
    selected_content = st.radio("", ("Model Introduction", "AKD and CKD Prediction"))

    if selected_content == "Model Introduction":
        st.subheader("Model Introduction")
        st.write("This online platform provides predictions for the probability of post-nephrectomy acute kidney Disease (AKD) and chronic Kidney Disease (CKD) using a LightGBM machine learning model.")
        # Disclaimer
        st.subheader("Disclaimer")
        st.write("The predictions generated by this model are based on historical data and statistical patterns, and they may not be entirely accurate or applicable to every individual.")
        st.write("**For Patients:**")
        st.write("- The predictions presented by this platform are intended for informational purposes only and should not be regarded as a substitute for professional medical advice, diagnosis, or treatment.")
        st.write("- Consult with your healthcare provider for personalized medical guidance and decisions concerning your health.")
        st.write("**For Healthcare Professionals:**")
        st.write("- This platform should be considered as a supplementary tool to aid clinical decision-making and should not be the sole determinant of patient care.")
        st.write("- Clinical judgment and expertise should always take precedence in medical practice.")
        st.write("**For Researchers:**")
        st.write("- While this platform can serve as a valuable resource for research purposes, it is crucial to validate its predictions within your specific clinical context and patient population.")
        st.write("- Ensure that your research adheres to all ethical and regulatory standards.")
        st.write("The creators of this online platform and model disclaim any responsibility for decisions or actions taken based on the predictions provided herein. Please use this tool responsibly and always consider individual patient characteristics and clinical context when making medical decisions.")
        st.write("By utilizing this online platform, you agree to the terms and conditions outlined in this disclaimer.")

    elif selected_content == "AKD and CKD Prediction":
        st.subheader("AKD and CKD Prediction after nephrectomy")

    # User selects prediction type (AKD or CKD)
        prediction_type = st.radio("Select Prediction Type", ("AKD Prediction", "CKD Prediction"))

    # Feature input
        features = []

        if prediction_type == "AKD Prediction":
            st.subheader("AKD Features")
 
            Operativeduration = st.number_input("Operative Duration (Hours)", value=0.0, format="%.2f") 
            Hb = st.number_input("Hb (g/L)", value=0, format="%d")
            Bloodloss = st.number_input("Blood Loss (ML)", value=0, format="%d")
            Urine_protein = st.selectbox("Urine Protein", ["-", "1+", "2+", "3+"])
            Hct = st.number_input("Hct (%)", value=0.0, format="%.2f")
            AKIGrade = st.selectbox("AKI Grade", ["Stage 0", "Stage 1", "Stage 2", "Stage 3"])
            ALB = st.number_input("ALB (g/L)", value=0.0, format="%.2f")
            SBP = st.number_input("SBP (mmHg)", value=0, format="%d")
            BaslineeGFR = st.number_input("Baseline eGFR (ml/min/1.73 m²)", value=0.0, format="%.2f")
            MPV = st.number_input("MPV (fL)", value=0.0, format="%.2f")

        # Map AKIGrade back to 0, 1, 2, 3 for prediction
            Urine_protein_encoded = Urine_protein_mapping[Urine_protein]
            AKIGrade_encoded = AKIGrade_mapping[AKIGrade]

            features.extend([Operativeduration, Hb, Bloodloss, Urine_protein_encoded, Hct,AKIGrade_encoded, ALB, SBP, BaslineeGFR, MPV])
        else:
            st.subheader("CKD Features")

            BaslineeGFR = st.number_input("Basline eGFR (ml/min/1.73 m²)", value=0.0, format="%.2f")
            Pathology = st.selectbox("Pathology", ["Benign", "Malignant (Non-Clear)", "Clear Cell"])
            AKI_and_AKD = st.selectbox("Trajectories of renal function", ["NKD" ,"subacute AKD", "AKI recover","AKD with AKI"])
            Age = st.number_input("Age (Years)", value=0, format="%d")
            TBIL = st.number_input("TBIL (umol/L)", value=0.0, format="%.2f")
         
            Pathology_encoded = Pathology_mapping[Pathology]
            AKI_and_AKD_encoded = AKI_and_AKD_mapping[AKI_and_AKD]

            features.extend([BaslineeGFR, Pathology_encoded, AKI_and_AKD_encoded, Age, TBIL])

        # Create a button to make predictions
        if st.button('Predict'):
            features_array = np.array(features).reshape(1, -1)

            if prediction_type == "AKD Prediction":
                akd_probability = predict_akd_probability(features_array)
                st.write(f'AKD Probability: {akd_probability:.2f}')
            else:
                ckd_probability = predict_ckd_probability(features_array)
                st.write(f'CKD Probability: {ckd_probability:.2f}')

if __name__ == '__main__':
    main()
